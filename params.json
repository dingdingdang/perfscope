{"name":"Perfscope","tagline":"A tool that statically evaluates source code commit's risk of introducing performance regression","body":"# Performance Regression Testing Target Prioritization via Performance Risk Analysis\r\n\r\n## Problem Overview\r\nAs software evolves, problematic changes can significantly degrade software performance, i.e., introducing performance regression. Performance regression testing is an effective way \r\nto reveal such issues in an early stage. Yet because of its high overhead, this activity \r\nis usually performed infrequently. Consequently, when a regression problem is spotted at a\r\ncertain point, multiple commits might have been merged since last testing. Developers have \r\nto spend extra time and efforts narrowing down which commit caused the problem. Existing \r\nefforts try to improve performance regression testing efficiency through test case reduction or prioritization.\r\n\r\n## Solution Overview\r\nWe propose a new lightweight and white-box approach, performance risk analysis (PRA), to improve performance regression testing efficiency via testing target prioritization. The analysis statically evaluates a given source code commitâ€™s risk in introducing performance regression. Performance regression testing can leverage the analysis result to test commits with high risks first while delaying or skipping testing on low-risk commits.\r\n\r\nWe present **PerfScope**, a tool that statically analyzes a given patch's performance impact \r\nto existing source repository. It consists of several parts to operate:\r\n\r\n- Parser: parses the patch file for information like what file(s) \r\n    are modified, which location does it lie, etc.\r\n    Located: \r\n      -- lib/parser/PatchCompiler, Debug+Asserts/bin/patch-c\r\n      -- lib/parser/PatchIRDecoder, library\r\n\r\n- Mapper: maps the change location in source file to the \r\n    corresponding programming constructs.\r\n    Located: \r\n      -- lib/mapper, library\r\n\r\n- Filter: prunes out insignificant changes such as stylish changes \r\n    or renaming. \r\n    Located: \r\n      -- tools/PerfDiff, Debug+Asserts/bin/perfdiff\r\n\r\n- Profile Database: contains a list of frequent or expensive functions. \r\n    White-list functions can also be added to the profile.\r\n    Located: \r\n      -- data\r\n\r\n- Analyzer: performs Performance Risk Analysis (PRA) on given commit.\r\n    Located:\r\n      -- tools/PerfScope, Debug+Asserts/bin/perfscope\r\n\r\n- TestDB: tracks performance test cases execution information to \r\n    further recommend which test case may be useful to uncover the \r\n    performance regression issues. (work in progress)\r\n\r\nTwo auxiliary tools:\r\n- ListFiles: list the file names and paths in a given module.\r\n    Located:\r\n      -- tools/ListFiles, Debug+Asserts/lib/LLVMListFiles.so\r\n- StaticProfiler: generate a list of expensive and frequent functions based\r\n    on static analysis.\r\n    Located:\r\n      -- tools/StaticProfiler, Debug+Asserts/bin/staticprofiler\r\n\r\nMost of the tools have a separate README in their location and its\r\nusages can be found using -h option.\r\n\r\nFor bug report or any other suggestion, please contact ryanhuang@cs.ucsd.edu.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}